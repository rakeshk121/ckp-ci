# This workflow performs following actions
# Building and Signing of Binaries: KUBEADM, KUBELET and KUBECTL
# Building and Signing of Docker images of Core-components
# Creating deb packages of KUBEADM, KUBELET and KUBECTL

#1.26.10 - b8609d4dd75c5d6fba4a5eaa63a5507cb39a6e99
#1.27.6 - 741c8db18a52787d734cbe4795f0b4ad860906d6
#1.28.3 - a8a1abc25cad87333840cd7d54be2efaf31a3177
#1.29.0 - 3f7a50f38688eb332e2a1b013678c6435d539ae6

name: build_pkgs_images
on: [ workflow_dispatch ]
jobs:
  script:
    #runs-on: ubuntu-latest
    runs-on:
      - self-hosted
    name: clone and create deb
    steps:    
      - name: Print and Verify Env Variables
        run: |
          echo "${{ vars.VERSION }}"
          echo "${{ vars.KUBE_GIT_MAJOR }}"
          echo "${{ vars.KUBE_GIT_MINOR }}"
          echo "${{ vars.KUBE_GIT_COMMIT }}"
          echo "${{ vars.RELEASE_VERSION }}"
          
      - name: Checkout
        uses: actions/checkout@v3
        with:
           repository: 'coredgeio/ckp'
           ref: "${{ vars.KUBE_GIT_COMMIT }}"
           token: ${{ secrets.GH_PAT }}
           
      - name: Installing make dpkg dpkg-sig
        run: sudo apt install make dpkg dpkg-sig -y

      - name: Build k8s core images and binaries
        run:  |
           rm -rf /tmp/ckp-deb/*
           export KUBE_GIT_MAJOR=${{ vars.KUBE_GIT_MAJOR }}
           export KUBE_GIT_COMMIT=${{ vars.KUBE_GIT_COMMIT }}
           export KUBE_GIT_MINOR=${{ vars.KUBE_GIT_MINOR }}
           export KUBE_GIT_VERSION="v${{ vars.VERSION }}-ckp"
           export KUBE_GIT_TREE_STATE='clean'
           echo v${{ vars.VERSION }}-ckp
           make quick-release
           ./_output/dockerized/bin/linux/amd64/kubeadm version
            
      # - name: Clear the existing signature (in case of re-run)
      #   shell: bash
      #   run: | 
      #     gpg --list-keys --no-tty
      #     gpg --pinentry-mode loopback --detach-sign _output/dockerized/bin/linux/amd64/kubeadm 
      #     gpg --pinentry-mode loopback --detach-sign _output/dockerized/bin/linux/amd64/kubelet 
      #     gpg --pinentry-mode loopback --detach-sign _output/dockerized/bin/linux/amd64/kubectl
      #     #added here
      #     # gpg --pinentry-mode loopback --detach-sign _output/dockerized/bin/linux/amd64/kube-apiserver
      #     # gpg --pinentry-mode loopback --detach-sign _output/dockerized/bin/linux/amd64/kube-proxy
      #     # gpg --pinentry-mode loopback --detach-sign _output/dockerized/bin/linux/amd64/kube-controller-manager
      #     # gpg --pinentry-mode loopback --detach-sign _output/dockerized/bin/linux/amd64/kube-scheduler


      - name: Checkout Repository for k8s core components configs
        uses: actions/checkout@v2
        with:
          path: config-repo        

 
      - name: Creating Kubeadm Deb packages
        shell: bash
        run: |
           echo kubeadm_${{ vars.VERSION }}-00_amd64
           #creating bin folder and copy the kubeadm binary
           mkdir -p kubeadm_${{ vars.VERSION }}-00_amd64/usr/bin 
           cp _output/dockerized/bin/linux/amd64/kubeadm kubeadm_${{ vars.VERSION }}-00_amd64/usr/bin/.
           chmod +x kubeadm_${{ vars.VERSION }}-00_amd64/usr/bin/*
           ls kubeadm_${{ vars.VERSION }}-00_amd64

          
           #Copy the config files lile control, service files
           major_version=$(echo ${{ vars.VERSION }} | cut -d. -f1,2)
           cp -r config-repo/kubeadm/$major_version/kubeadm_${{ vars.VERSION }}/* kubeadm_${{ vars.VERSION }}-00_amd64
           ls kubeadm_${{ vars.VERSION }}-00_amd64
           
           cat <<EOF > kubeadm_${{ vars.VERSION }}-00_amd64/DEBIAN/control
           Package: kubeadm
           Version: ${{ vars.VERSION }}-ckp
           Maintainer: Coredge.io 
           Depends: libc6
           Architecture: amd64
           Description: kubeadm ckp binary installation 
           EOF

           dpkg --build kubeadm_${{ vars.VERSION }}-00_amd64

      
      - name: Creating Kubelet Deb packages
        shell: bash
        run: |
           echo kubelet_${{ vars.VERSION }}-00_amd64
           #creating bin folder and copy the kubelet binary
           mkdir -p kubelet_${{ vars.VERSION }}-00_amd64/usr/bin 
           cp _output/dockerized/bin/linux/amd64/kubelet kubelet_${{ vars.VERSION }}-00_amd64/usr/bin/.
           chmod +x kubelet_${{ vars.VERSION }}-00_amd64/usr/bin/*
           ls kubelet_${{ vars.VERSION }}-00_amd64

           #Copy the config files lile control, service files
           major_version=$(echo ${{ vars.VERSION }} | cut -d. -f1,2)
           cp -r config-repo/kubelet/$major_version/kubelet_${{ vars.VERSION }}/* kubelet_${{ vars.VERSION }}-00_amd64
           ls kubelet_${{ vars.VERSION }}-00_amd64
           
           cat <<EOF > kubelet_${{ env.VERSION }}-00_amd64/DEBIAN/control
           Package: kubelet 
           Version: ${{ env.VERSION }}-ckp
           Maintainer: Coredge.io 
           Depends: libc6
           Architecture: amd64
           Description: kubelet ckp binary installation 
           EOF

           dpkg --build kubelet_${{ vars.VERSION }}-00_amd64
           
      - name: Creating kubectl deb package
        shell: bash
        run: |
           echo kubectl_${{ vars.VERSION }}-00_amd64
           # Creating bin folder and copy the kubectl binary
           mkdir -p kubectl_${{ vars.VERSION }}-00_amd64/usr/bin 
           cp _output/dockerized/bin/linux/amd64/kubectl kubectl_${{ vars.VERSION }}-00_amd64/usr/bin/.
           chmod +x kubectl_${{ vars.VERSION }}-00_amd64/usr/bin/*
           ls kubectl_${{ vars.VERSION }}-00_amd64

           # Copy the config files lile control, service files
           major_version=$(echo ${{ vars.VERSION }} | cut -d. -f1,2)
           cp -r config-repo/kubectl/$major_version/kubectl_${{ vars.VERSION }}/* kubectl_${{ vars.VERSION }}-00_amd64
           ls kubectl_${{ vars.VERSION }}-00_amd64
           
           cat <<EOF> kubectl_${{ env.VERSION }}-00_amd64/DEBIAN/control
           Package: kubectl
           Version: ${{ env.VERSION }}-ckp
           Architecture: amd64
           Maintainer: Coredge.io
           Installed-Size: 47585
           Section: misc
           Priority: optional
           Description: CKP Command Line Tool
           EOF

           dpkg --build kubectl_${{ vars.VERSION }}-00_amd64

      - name: Signing deb packages
        shell: bash
        run: |
          # Removing if any existing signatures
          ar d "kubeadm_${{ vars.VERSION }}-00_amd64.deb" _gpgbuilder
          ar d "kubelet_${{ vars.VERSION }}-00_amd64.deb" _gpgbuilder
          ar d "kubectl_${{ vars.VERSION }}-00_amd64.deb" _gpgbuilder
          
          # Signing the debian packages
          dpkg-sig -k coredgeio --sign builder  --gpg-options "--pinentry-mode loopback" kubeadm_${{ vars.VERSION }}-00_amd64.deb
          dpkg-sig -k coredgeio --sign builder  --gpg-options "--pinentry-mode loopback" kubelet_${{ vars.VERSION }}-00_amd64.deb
          dpkg-sig -k coredgeio --sign builder  --gpg-options "--pinentry-mode loopback" kubectl_${{ vars.VERSION }}-00_amd64.deb

          # Move the pacakges to common folder
          mkdir -p /tmp/ckp-deb
          cp kubeadm_${{ vars.VERSION }}-00_amd64.deb /tmp/ckp-deb
          cp kubelet_${{ vars.VERSION }}-00_amd64.deb /tmp/ckp-deb
          cp kubectl_${{ vars.VERSION }}-00_amd64.deb /tmp/ckp-deb
      
      - name: Pushing k8s core components Docker images to Dockerhub
        shell: bash
        env: 
           docker_pass: ${{secrets.DOCKER_PASSWORD}}
           docker_user: ${{secrets.DOCKER_USER}}
           DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{secrets.DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE}}
           image_version: v${{ vars.VERSION }}-ckp
           docker_image_version: v${{ vars.VERSION }}-rc1
        run: |
          docker login -u $docker_user -p $docker_pass
          cd _output/release-images/amd64
          docker load -i kube-scheduler.tar
          docker load -i kube-proxy.tar
          docker load -i kube-controller-manager.tar
          docker load -i kube-apiserver.tar

          docker tag registry.k8s.io/kube-apiserver-amd64:$image_version ${{ vars.DOCKER_REGISTRY }}/kube-apiserver:$docker_image_version
          docker tag registry.k8s.io/kube-proxy-amd64:$image_version ${{ vars.DOCKER_REGISTRY }}/kube-proxy:$docker_image_version
          docker tag registry.k8s.io/kube-scheduler-amd64:$image_version ${{ vars.DOCKER_REGISTRY }}/kube-scheduler:$docker_image_version
          docker tag registry.k8s.io/kube-controller-manager-amd64:$image_version ${{ vars.DOCKER_REGISTRY }}/kube-controller-manager:$docker_image_version
          
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE
          docker push ${{ vars.DOCKER_REGISTRY }}/kube-apiserver:$docker_image_version
          docker push ${{ vars.DOCKER_REGISTRY }}/kube-proxy:$docker_image_version
          docker push ${{ vars.DOCKER_REGISTRY }}/kube-scheduler:$docker_image_version
          docker push ${{ vars.DOCKER_REGISTRY }}/kube-controller-manager:$docker_image_version 
    